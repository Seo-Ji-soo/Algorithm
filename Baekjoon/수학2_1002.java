// 두 원의 교점의 개수를 구하는 문제
/*
첫번째 원의 좌표 (x1,y1) 첫번째 원의 반지름 = r1
두번째 원의 좌표 (x2,y2) 두번째 원의 반지름 = r2

입력 - 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 
       각 테스트 케이스는 다음과 같이 이루어져 있다.
       한 줄에 x1, y1, r1, x2, y2, r2가 주어진다. 
       x1, y1, x2, y2는 -10,000보다 크거나 같고, 
       10,000보다 작거나 같은 정수이고, 
       r1, r2는 10,000보다 작거나 같은 자연수이다.
       
출력 - 각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 
       만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.
       
예제)
입력 - 3
       0 0 13 40 0 37
       0 0 3 0 7 4
       1 1 1 1 1 5
       
출력 - 2
       1
       0
*/

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		/*
		 경우의 수.
		 1.동심원이면서 같은 반지름을 가질때,(두개의 원이 완전 합쳐짐) --> -1(무한대임으로)
		 2.중심이 다르나 같은 반지름을 가질때,(외접함) --> 1
		 3.중심이 다르나 다른 반지름을 가질때,(내접함) --> 1
		 4.서로 다른 원이 외곽쪽으로 떨어져 있을 때,(만나지 않음) --> 0
		 5.한 원 안에 다른 하나의 원이 갇혀 있을 때,(만나지 않음) --> 0
		 6.서로다른 원이 겹쳐 두개의 접점이 생길때, --> 2
		 */
		Scanner sc = new Scanner(System.in);
		
		int t = sc.nextInt();  // 테스트 케이스의 개수.
		
		int c = 0;
					
		// 입력받아 계산.
		for(int i=0; i<t; i++) {
			// 조규현의 위치
			int x1 = sc.nextInt();
			int y1 = sc.nextInt();
			// 조규현과 류재명의 거리
			int r1 = sc.nextInt();
			// 백승환의 위치
			int x2 = sc.nextInt();
			int y2 = sc.nextInt();
			// 백승환과 류재명의 거리
			int r2 = sc.nextInt();
			
			
			System.out.println(result(x1,y1,r1,x2,y2,r2));
			continue;
			
		}
			
  }//메인메소드종료

	// 리턴 값 출력.
	private static int result(int x1,int y1, int r1, int x2, int y2, int r2) {
		
		// 서로 다른 원이 x축이 같은지 y축이 같은지 서로 다른지 모름. --> 합하는 이유.
		// 그리고 x1이 클지 x2가 클지 모르는데 마이너스를 시켜줌. 
		// 따라서 음수가 나올 수 있으므로 따라서 제곱 시켜줌.
		int d = (int)(Math.pow(x1-x2, 2) + Math.pow(y1-y2, 2));
		
		//1.동심원이면서 같은 반지름을 가질때,(두개의 원이 완전 합쳐짐) --> -1(무한대임으로)
		if(x1==x2&&y1==y2&&r1==r2) {
			return -1;
		}
		
		//2.중심이 다르나 같은 반지름을 가질때,(외접함) --> 1
		else if(d==Math.pow(r1+r2, 2)) {
			return 1;
		}
		
		//3.중심이 다르나 다른 반지름을 가질때,(내접함) --> 1
		else if(d==Math.pow(r1-r2, 2)) {
			return 1;
		}
		
		//4.서로 다른 원이 외곽쪽으로 떨어져 있을 때,(만나지 않음) --> 0
		else if(d>Math.pow(r1+r2, 2)) {
			return 0;
		}
		
		//5.한 원 안에 다른 하나의 원이 갇혀 있을 때,(만나지 않음) --> 0
		else if(d<Math.pow(r1-r2, 2)) {
			return 0;
		}
		
		//6.서로다른 원이 겹쳐 두개의 접점이 생길때, --> 2 == 그 이외....
		else {
			return 2;
		}
	}
	
}//클래스종료

